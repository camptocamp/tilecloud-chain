[tool.ruff]
line-length = 110
target-version = "py310"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.poetry]
version = "0.0.0"

[tool.poetry.plugins."pyramid.scaffold"]
tilecloud_chain = "tilecloud_chain.scaffolds:Create"

[tool.poetry.plugins."paste.app_factory"]
main = "tilecloud_chain.server:main"

[tool.poetry.dependencies]
# Minimal version should also be set in the jsonschema-gentypes.yaml file
python = ">=3.10,<3.13"
c2cwsgiutils = { version = "6.1.7", extras = ["standard", "broadcast", "oauth2", "debug"] }
pyramid-mako = "1.1.0"
python-dateutil = "2.9.0.post0"
tilecloud = { version = "1.13.1", extras = ["azure", "aws", "redis", "wsgi"] }
Jinja2 = "3.1.6"
PyYAML = "6.0.2"
Shapely = "2.1.1"
jsonschema = "4.24.0"
pyramid = "2.0.2"
jsonschema-validator-new = "0.3.2"
azure-storage-blob = "12.25.1"
waitress = "3.0.2"
certifi = "2025.4.26"
Paste = "3.10.1"
psutil = "7.0.0"
pyproj = "3.7.1"
psycopg = { version = "3.2.9", extras = ["binary"] }
aiohttp = "3.12.6"
sqlalchemy = { version = "2.0.41", extras = ["asyncio"] }
pytest-asyncio = "1.0.0"
aiofiles = "24.1.0"

[tool.poetry.group.dev.dependencies]
prospector = { extras = ["with_mypy", "with_bandit", "with_pyroma", "with_ruff"], version = "1.17.1" }
prospector-profile-duplicated = "1.10.5"
prospector-profile-utils = "1.22.3"
c2cwsgiutils = { version = "6.1.7", extras = ["test_images"] }
scikit-image = { version = "0.25.2" }
pytest = "8.3.5"
testfixtures = "8.3.0"
coverage = "7.8.2"
types-redis = "4.6.0.20241004"
types-requests = "2.32.0.20250515"
types-aiofiles = "24.1.0.20250516"
pytest-asyncio = "1.0.0"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
pattern = "^(?P<base>\\d+(\\.\\d+)*)"
format-jinja = """
{%- if env.get("VERSION_TYPE") == "default_branch" -%}
{{serialize_pep440(bump_version(base, 1), dev=distance)}}
{%- elif env.get("VERSION_TYPE") == "stabilization_branch" -%}
{{serialize_pep440(bump_version(base, 2), dev=distance)}}
{%- elif distance == 0 -%}
{{serialize_pep440(base)}}
{%- else -%}
{{serialize_pep440(bump_version(base), dev=distance)}}
{%- endif -%}
"""

[tool.poetry-plugin-tweak-dependencies-version]
default = "present"

[project]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Environment :: Web Environment',
    'Framework :: Pyramid',
    'Intended Audience :: Other Audience',
    'License :: OSI Approved :: BSD License',
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Topic :: Scientific/Engineering :: GIS',
    'Typing :: Typed',
]
dynamic = ["dependencies", "version"]
name = "tilecloud-chain"
description = "Tools to generate tiles from WMS or Mapnik, to S3, Berkeley DB, MBTiles, or local filesystem in WMTS layout using Amazon cloud services."
readme = "README.md"
keywords = ["gis", "tilecloud", "chain"]
license = "BSD-2-Clause"
authors = [{name = "Camptocamp",email = "info@camptocamp.com"}]
packages = [{ include = "tilecloud_chain" }]
include = ["tilecloud_chain/py.typed", "tilecloud_chain/*.rst", "tilecloud_chain/*.md"]
requires-python = ">=3.10"
dependencies = ["c2cwsgiutils[broadcast,debug,oauth2,standard]", "pyramid-mako", "python-dateutil", "tilecloud[aws,azure,redis,wsgi]", "Jinja2", "PyYAML", "Shapely", "jsonschema", "pyramid", "jsonschema-validator-new", "azure-storage-blob", "waitress", "certifi", "Paste", "psutil", "pyproj", "psycopg[binary]", "aiohttp", "sqlalchemy[asyncio]", "pytest-asyncio", "aiofiles"]

[project.urls]
repository = "https://github.com/camptocamp/tilecloud-chain"
"Bug Tracker" = "https://github.com/camptocamp/tilecloud-chain/issues"

[project.scripts]
generate-tiles = "tilecloud_chain.generate:main"
generate-controller = "tilecloud_chain.controller:main"
generate-cost = "tilecloud_chain.cost:main"
generate-copy = "tilecloud_chain.copy_:main"
generate-process = "tilecloud_chain.copy_:process"
import-expiretiles = "tilecloud_chain.expiretiles:main"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning", "poetry-plugin-tweak-dependencies-version"]
build-backend = "poetry.core.masonry.api"

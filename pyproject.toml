[tool.black]
line-length = 110
target-version = ["py39"]

[tool.mypy]
python_version = 3.9
warn_redundant_casts = true
warn_unused_ignores = true
ignore_missing_imports = true
strict = true

[tool.isort]
profile = "black"
line_length = 110
known_first_party = "tilecloud"
known_third_party = "c2cwsgiutils"

[tool.poetry]
name = "tilecloud-chain"
version = "0.0.0"
description = "Tools to generate tiles from WMS or Mapnik, to S3, Berkeley DB, MBTiles, or local filesystem in WMTS layout using Amazon cloud services."
readme = "README.md"
authors = ["Camptocamp <info@camptocamp.com>"]
repository = "https://github.com/camptocamp/tilecloud-chain"
license = "BSD-2-Clause"
keywords = ["gis", "tilecloud", "chain"]
packages = [{ include = "tilecloud_chain" }]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: Pyramid",
    "Intended Audience :: Other Audience",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: GIS",
    "Typing :: Typed",
]
include = ["tilecloud_chain/py.typed", "tilecloud_chain/*.rst", "tilecloud_chain/*.md"]

[tool.poetry.scripts]
generate-tiles = "tilecloud_chain.generate:main"
generate-controller = "tilecloud_chain.controller:main"
generate-cost = "tilecloud_chain.cost:main"
generate-copy = "tilecloud_chain.copy_:main"
generate-process = "tilecloud_chain.copy_:process"
import-expiretiles = "tilecloud_chain.expiretiles:main"

[tool.poetry.plugins."pyramid.scaffold"]
tilecloud_chain = "tilecloud_chain.scaffolds:Create"

[tool.poetry.plugins."paste.app_factory"]
main = "tilecloud_chain.server:main"

[tool.poetry.dependencies]
python = ">=3.9,<3.11"
c2cwsgiutils = { version = "6.0.4", extras = ["standard", "broadcast", "oauth2", "debug"] }
pyramid-mako = "1.1.0"
python-dateutil = "2.8.2"
tilecloud = { version = "1.10.0", extras = ["azure", "aws", "redis", "wsgi"] }
Jinja2 = "3.1.2"
PyYAML = "6.0.1"
Shapely = "2.0.1"
jsonschema = "4.19.1"
pyramid = "2.0.2"
jsonschema-validator-new = "0.1.0"
azure-storage-blob = "12.18.2"
waitress = "2.1.2"
certifi = "2023.7.22"
cryptography = "41.0.4"
msal = "1.24.1"
pillow = "10.0.1"
urllib3 = "1.26.18"

[tool.poetry.dev-dependencies]
prospector = { extras = ["with_mypy", "with_bandit", "with_pyroma"], version = "1.10.2" }
c2cwsgiutils = { version = "6.0.4", extras = ["test_images"] }
scikit-image = { version = "0.21.0" }
pytest = "7.4.2"
testfixtures = "7.2.0"
coverage = "7.3.2"
types-redis = "4.6.0.7"
types-requests = "2.31.0.6"

[tool.poetry.group.dev.dependencies]
prospector-profile-duplicated = "0.3.0"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning", "poetry-plugin-tweak-dependencies-version"]
build-backend = "poetry.core.masonry.api"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
pattern = "^(?P<base>\\d+(\\.\\d+)*)"
format-jinja = """
{%- if env.get("VERSION_TYPE") == "version_branch" -%}
{{serialize_pep440(bump_version(base, 1 if env.get("IS_MASTER") == "TRUE" else 2), dev=distance)}}
{%- elif distance == 0 -%}
{{serialize_pep440(base)}}
{%- else -%}
{{serialize_pep440(bump_version(base), dev=distance)}}
{%- endif -%}
"""

[tool.poetry-plugin-tweak-dependencies-version]
default = "present"
